{"created": 1723097892.2068858, "duration": 2.891433000564575, "exitcode": 1, "root": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest", "environment": {}, "summary": {"error": 7, "total": 7, "collected": 7}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "assets", "outcome": "passed", "result": []}, {"nodeid": "test_server_linux.py::TestServerLinux", "outcome": "passed", "result": [{"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]", "type": "Function", "lineno": 59}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# system-test,python3 ./test.py -f 1-insert/insert_column_value.py]", "type": "Function", "lineno": 59}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# system-test,python3 ./test.py -f 2-query/primary_ts_base_5.py]", "type": "Function", "lineno": 59}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# system-test,python3 ./test.py -f 2-query/case_when.py]", "type": "Function", "lineno": 59}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# system-test,python3 ./test.py -f 2-query/partition_limit_interval.py]", "type": "Function", "lineno": 59}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[system-test,python3 ./test.py -f 2-query/join.py]", "type": "Function", "lineno": 59}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[system-test,python3 ./test.py -f 2-query/fill.py]", "type": "Function", "lineno": 59}]}, {"nodeid": "test_server_linux.py", "outcome": "passed", "result": [{"nodeid": "test_server_linux.py::TestServerLinux", "type": "Class"}]}, {"nodeid": "test_server_linux.txt", "outcome": "passed", "result": []}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "assets", "type": "Dir"}, {"nodeid": "test_server_linux.py", "type": "Module"}, {"nodeid": "test_server_linux.txt", "type": "DoctestTextfile"}]}], "tests": [{"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]", "lineno": 59, "outcome": "error", "keywords": ["test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]", "server_linux", "pytestmark", "# army,python3 ./test.py -f query/query_basic.py -N 3", "TestServerLinux", "test_server_linux.py", "smokeTest", ""], "setup": {"duration": 2.76022397, "outcome": "failed", "crash": {"path": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/test_server_linux.py", "lineno": 18, "message": "AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode"}, "traceback": [{"path": "test_server_linux.py", "lineno": 31, "message": ""}, {"path": "test_server_linux.py", "lineno": 18, "message": "AssertionError"}], "stdout": "CMD: bash getAndRunInstaller.sh -m enterprise -f server -l false -c x64 -v 3.3.2.6 -o smoking -s has -t tar\nSTDOUT: testFile:server,verMode:enterprise,lite:false,cpuType:x64,packageType:tar,version-3.3.2.6,originversion:smoking,sourcePath:has\ntdPath:TDengine-enterprise-3.3.2.6,packageName:TDengine-enterprise-3.3.2.6-macOS-x64.tar.gz}\n\u001b[1;32m===== install basesoft =====\u001b[0m\n\n/usr/bin/apt\n/usr/bin/apt\n/usr/bin/expect\n\u001b[0;33mexpect is already installed\u001b[0m\n\u001b[1;32m===== Uninstall all components of TDeingne =====\u001b[0m\n\n/usr/local/bin/rmtaos\n\u001b[0;33muninstall all components of TDeingne:rmtaos\u001b[0m\n\u001b[1;32m===== new workroom path =====\u001b[0m\n\n\u001b[0;34mmkdir -p /packageTest\u001b[0m\n\u001b[1;32m===== download  installPackage =====\u001b[0m\n\n\u001b[1;32m===== install Package =====\u001b[0m\n\n\u001b[1;32m===== check installPackage File of tar =====\u001b[0m\n\n\u001b[0;33munzip the new installation package\u001b[0m\n\u001b[0;34mtar -xf TDengine-enterprise-3.3.2.6-macOS-x64.tar.gz\u001b[0m\n\u001b[1;32mThe number and names of files are the same as previous installation packages\u001b[0m\n\n\u001b[0;33m===== install Package of tar =====\u001b[0m\n\u001b[0;34mbash install.sh  -e no  \u001b[0m\n\u001b[0;33m===== end of shell file =====\u001b[0m\n\nSTDERR: getAndRunInstaller.sh: line 120: apt-get: command not found\ngetAndRunInstaller.sh: line 120: apt-get: command not found\nsudo: 3 incorrect password attempts\nmkdir: /packageTest: Read-only file system\ngetAndRunInstaller.sh: line 214: cd: /packageTest: No such file or directory\ngetAndRunInstaller.sh: line 218: cd: /packageTest: No such file or directory\ncp: ./debRpmAutoInstall.sh and /Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/debRpmAutoInstall.sh are identical (not copied).\ngetAndRunInstaller.sh: line 264: cd: /packageTest: No such file or directory\ntar: Error opening archive: Failed to open 'TDengine-enterprise-3.3.2.6-macOS-x64.tar.gz'\ngetAndRunInstaller.sh: line 268: cd: /packageTest/TDengine-enterprise-3.3.2.6: No such file or directory\ngetAndRunInstaller.sh: line 270: cd: /packageTest: No such file or directory\ngetAndRunInstaller.sh: line 271: /packageTest/diffFile.log: No such file or directory\ncat: /packageTest/diffFile.log: No such file or directory\ngetAndRunInstaller.sh: line 284: cd: /packageTest/TDengine-enterprise-3.3.2.6: No such file or directory\nbash: install.sh: No such file or directory\ngetAndRunInstaller.sh: line 298: cd: /packageTest: No such file or directory\n\nReturn Code: 0\nCMD: cp /usr/bin/taos*  ../../debug/build/bin/\nSTDOUT: \nSTDERR: cp: /usr/bin/taos*: No such file or directory\n\nReturn Code: 1\n", "longrepr": "request = <SubRequest 'setup_module' for <Function test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]>>\n\n    @pytest.fixture(scope=\"module\")\n    def setup_module(request):\n        def run_command(command):\n            result = subprocess.run(command, capture_output=True, text=True, shell=True)\n            print(\"CMD:\", command)\n            print(\"STDOUT:\", result.stdout)\n            print(\"STDERR:\", result.stderr)\n            print(\"Return Code:\", result.returncode)\n            assert result.returncode == 0\n            return result\n    \n        # setup before module tests\n        # bash getAndRunInstaller.sh -m ${verMode} -f server -l false -c x64  -v ${version} -o ${baseVersion} -s ${sourcePath}  -t tar\n        verMode = request.config.getoption(\"--verMode\")\n        taosVersion = request.config.getoption(\"--taosVersion\")\n        baseVersion = request.config.getoption(\"--baseVersion\")\n        sourcePath = request.config.getoption(\"--sourcePath\")\n        cmd = \"bash getAndRunInstaller.sh -m %s -f server -l false -c x64 -v %s -o %s -s %s -t tar\" % (\n            verMode, taosVersion, baseVersion, sourcePath)\n        run_command(cmd)\n        cmd = \"cp /usr/bin/taos*  ../../debug/build/bin/\"\n>       run_command(cmd)\n\ntest_server_linux.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncommand = 'cp /usr/bin/taos*  ../../debug/build/bin/'\n\n    def run_command(command):\n        result = subprocess.run(command, capture_output=True, text=True, shell=True)\n        print(\"CMD:\", command)\n        print(\"STDOUT:\", result.stdout)\n        print(\"STDERR:\", result.stderr)\n        print(\"Return Code:\", result.returncode)\n>       assert result.returncode == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode\n\ntest_server_linux.py:18: AssertionError"}, "teardown": {"duration": 0.00026716400000026397, "outcome": "passed"}}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# system-test,python3 ./test.py -f 1-insert/insert_column_value.py]", "lineno": 59, "outcome": "error", "keywords": ["test_execute_cases[# system-test,python3 ./test.py -f 1-insert/insert_column_value.py]", "server_linux", "pytestmark", "# system-test,python3 ./test.py -f 1-insert/insert_column_value.py", "TestServerLinux", "test_server_linux.py", "smokeTest", ""], "setup": {"duration": 0.00022476899999990252, "outcome": "failed", "crash": {"path": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/test_server_linux.py", "lineno": 18, "message": "AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode"}, "traceback": [{"path": "test_server_linux.py", "lineno": 31, "message": ""}, {"path": "test_server_linux.py", "lineno": 18, "message": "AssertionError"}], "longrepr": "request = <SubRequest 'setup_module' for <Function test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]>>\n\n    @pytest.fixture(scope=\"module\")\n    def setup_module(request):\n        def run_command(command):\n            result = subprocess.run(command, capture_output=True, text=True, shell=True)\n            print(\"CMD:\", command)\n            print(\"STDOUT:\", result.stdout)\n            print(\"STDERR:\", result.stderr)\n            print(\"Return Code:\", result.returncode)\n            assert result.returncode == 0\n            return result\n    \n        # setup before module tests\n        # bash getAndRunInstaller.sh -m ${verMode} -f server -l false -c x64  -v ${version} -o ${baseVersion} -s ${sourcePath}  -t tar\n        verMode = request.config.getoption(\"--verMode\")\n        taosVersion = request.config.getoption(\"--taosVersion\")\n        baseVersion = request.config.getoption(\"--baseVersion\")\n        sourcePath = request.config.getoption(\"--sourcePath\")\n        cmd = \"bash getAndRunInstaller.sh -m %s -f server -l false -c x64 -v %s -o %s -s %s -t tar\" % (\n            verMode, taosVersion, baseVersion, sourcePath)\n        run_command(cmd)\n        cmd = \"cp /usr/bin/taos*  ../../debug/build/bin/\"\n>       run_command(cmd)\n\ntest_server_linux.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncommand = 'cp /usr/bin/taos*  ../../debug/build/bin/'\n\n    def run_command(command):\n        result = subprocess.run(command, capture_output=True, text=True, shell=True)\n        print(\"CMD:\", command)\n        print(\"STDOUT:\", result.stdout)\n        print(\"STDERR:\", result.stderr)\n        print(\"Return Code:\", result.returncode)\n>       assert result.returncode == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode\n\ntest_server_linux.py:18: AssertionError"}, "teardown": {"duration": 0.00023888200000010684, "outcome": "passed"}}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# system-test,python3 ./test.py -f 2-query/primary_ts_base_5.py]", "lineno": 59, "outcome": "error", "keywords": ["test_execute_cases[# system-test,python3 ./test.py -f 2-query/primary_ts_base_5.py]", "server_linux", "pytestmark", "# system-test,python3 ./test.py -f 2-query/primary_ts_base_5.py", "TestServerLinux", "test_server_linux.py", "smokeTest", ""], "setup": {"duration": 0.0002509930000003102, "outcome": "failed", "crash": {"path": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/test_server_linux.py", "lineno": 18, "message": "AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode"}, "traceback": [{"path": "test_server_linux.py", "lineno": 31, "message": ""}, {"path": "test_server_linux.py", "lineno": 18, "message": "AssertionError"}], "longrepr": "request = <SubRequest 'setup_module' for <Function test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]>>\n\n    @pytest.fixture(scope=\"module\")\n    def setup_module(request):\n        def run_command(command):\n            result = subprocess.run(command, capture_output=True, text=True, shell=True)\n            print(\"CMD:\", command)\n            print(\"STDOUT:\", result.stdout)\n            print(\"STDERR:\", result.stderr)\n            print(\"Return Code:\", result.returncode)\n            assert result.returncode == 0\n            return result\n    \n        # setup before module tests\n        # bash getAndRunInstaller.sh -m ${verMode} -f server -l false -c x64  -v ${version} -o ${baseVersion} -s ${sourcePath}  -t tar\n        verMode = request.config.getoption(\"--verMode\")\n        taosVersion = request.config.getoption(\"--taosVersion\")\n        baseVersion = request.config.getoption(\"--baseVersion\")\n        sourcePath = request.config.getoption(\"--sourcePath\")\n        cmd = \"bash getAndRunInstaller.sh -m %s -f server -l false -c x64 -v %s -o %s -s %s -t tar\" % (\n            verMode, taosVersion, baseVersion, sourcePath)\n        run_command(cmd)\n        cmd = \"cp /usr/bin/taos*  ../../debug/build/bin/\"\n>       run_command(cmd)\n\ntest_server_linux.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncommand = 'cp /usr/bin/taos*  ../../debug/build/bin/'\n\n    def run_command(command):\n        result = subprocess.run(command, capture_output=True, text=True, shell=True)\n        print(\"CMD:\", command)\n        print(\"STDOUT:\", result.stdout)\n        print(\"STDERR:\", result.stderr)\n        print(\"Return Code:\", result.returncode)\n>       assert result.returncode == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode\n\ntest_server_linux.py:18: AssertionError"}, "teardown": {"duration": 0.0001890760000002878, "outcome": "passed"}}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# system-test,python3 ./test.py -f 2-query/case_when.py]", "lineno": 59, "outcome": "error", "keywords": ["test_execute_cases[# system-test,python3 ./test.py -f 2-query/case_when.py]", "server_linux", "pytestmark", "# system-test,python3 ./test.py -f 2-query/case_when.py", "TestServerLinux", "test_server_linux.py", "smokeTest", ""], "setup": {"duration": 0.00023630099999971677, "outcome": "failed", "crash": {"path": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/test_server_linux.py", "lineno": 18, "message": "AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode"}, "traceback": [{"path": "test_server_linux.py", "lineno": 31, "message": ""}, {"path": "test_server_linux.py", "lineno": 18, "message": "AssertionError"}], "longrepr": "request = <SubRequest 'setup_module' for <Function test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]>>\n\n    @pytest.fixture(scope=\"module\")\n    def setup_module(request):\n        def run_command(command):\n            result = subprocess.run(command, capture_output=True, text=True, shell=True)\n            print(\"CMD:\", command)\n            print(\"STDOUT:\", result.stdout)\n            print(\"STDERR:\", result.stderr)\n            print(\"Return Code:\", result.returncode)\n            assert result.returncode == 0\n            return result\n    \n        # setup before module tests\n        # bash getAndRunInstaller.sh -m ${verMode} -f server -l false -c x64  -v ${version} -o ${baseVersion} -s ${sourcePath}  -t tar\n        verMode = request.config.getoption(\"--verMode\")\n        taosVersion = request.config.getoption(\"--taosVersion\")\n        baseVersion = request.config.getoption(\"--baseVersion\")\n        sourcePath = request.config.getoption(\"--sourcePath\")\n        cmd = \"bash getAndRunInstaller.sh -m %s -f server -l false -c x64 -v %s -o %s -s %s -t tar\" % (\n            verMode, taosVersion, baseVersion, sourcePath)\n        run_command(cmd)\n        cmd = \"cp /usr/bin/taos*  ../../debug/build/bin/\"\n>       run_command(cmd)\n\ntest_server_linux.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncommand = 'cp /usr/bin/taos*  ../../debug/build/bin/'\n\n    def run_command(command):\n        result = subprocess.run(command, capture_output=True, text=True, shell=True)\n        print(\"CMD:\", command)\n        print(\"STDOUT:\", result.stdout)\n        print(\"STDERR:\", result.stderr)\n        print(\"Return Code:\", result.returncode)\n>       assert result.returncode == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode\n\ntest_server_linux.py:18: AssertionError"}, "teardown": {"duration": 0.00018270400000020004, "outcome": "passed"}}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[# system-test,python3 ./test.py -f 2-query/partition_limit_interval.py]", "lineno": 59, "outcome": "error", "keywords": ["test_execute_cases[# system-test,python3 ./test.py -f 2-query/partition_limit_interval.py]", "server_linux", "pytestmark", "# system-test,python3 ./test.py -f 2-query/partition_limit_interval.py", "TestServerLinux", "test_server_linux.py", "smokeTest", ""], "setup": {"duration": 0.00022510000000020014, "outcome": "failed", "crash": {"path": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/test_server_linux.py", "lineno": 18, "message": "AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode"}, "traceback": [{"path": "test_server_linux.py", "lineno": 31, "message": ""}, {"path": "test_server_linux.py", "lineno": 18, "message": "AssertionError"}], "longrepr": "request = <SubRequest 'setup_module' for <Function test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]>>\n\n    @pytest.fixture(scope=\"module\")\n    def setup_module(request):\n        def run_command(command):\n            result = subprocess.run(command, capture_output=True, text=True, shell=True)\n            print(\"CMD:\", command)\n            print(\"STDOUT:\", result.stdout)\n            print(\"STDERR:\", result.stderr)\n            print(\"Return Code:\", result.returncode)\n            assert result.returncode == 0\n            return result\n    \n        # setup before module tests\n        # bash getAndRunInstaller.sh -m ${verMode} -f server -l false -c x64  -v ${version} -o ${baseVersion} -s ${sourcePath}  -t tar\n        verMode = request.config.getoption(\"--verMode\")\n        taosVersion = request.config.getoption(\"--taosVersion\")\n        baseVersion = request.config.getoption(\"--baseVersion\")\n        sourcePath = request.config.getoption(\"--sourcePath\")\n        cmd = \"bash getAndRunInstaller.sh -m %s -f server -l false -c x64 -v %s -o %s -s %s -t tar\" % (\n            verMode, taosVersion, baseVersion, sourcePath)\n        run_command(cmd)\n        cmd = \"cp /usr/bin/taos*  ../../debug/build/bin/\"\n>       run_command(cmd)\n\ntest_server_linux.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncommand = 'cp /usr/bin/taos*  ../../debug/build/bin/'\n\n    def run_command(command):\n        result = subprocess.run(command, capture_output=True, text=True, shell=True)\n        print(\"CMD:\", command)\n        print(\"STDOUT:\", result.stdout)\n        print(\"STDERR:\", result.stderr)\n        print(\"Return Code:\", result.returncode)\n>       assert result.returncode == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode\n\ntest_server_linux.py:18: AssertionError"}, "teardown": {"duration": 0.00021509600000024776, "outcome": "passed"}}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[system-test,python3 ./test.py -f 2-query/join.py]", "lineno": 59, "outcome": "error", "keywords": ["test_execute_cases[system-test,python3 ./test.py -f 2-query/join.py]", "server_linux", "pytestmark", "system-test,python3 ./test.py -f 2-query/join.py", "TestServerLinux", "test_server_linux.py", "smokeTest", ""], "setup": {"duration": 0.00026030899999973656, "outcome": "failed", "crash": {"path": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/test_server_linux.py", "lineno": 18, "message": "AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode"}, "traceback": [{"path": "test_server_linux.py", "lineno": 31, "message": ""}, {"path": "test_server_linux.py", "lineno": 18, "message": "AssertionError"}], "longrepr": "request = <SubRequest 'setup_module' for <Function test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]>>\n\n    @pytest.fixture(scope=\"module\")\n    def setup_module(request):\n        def run_command(command):\n            result = subprocess.run(command, capture_output=True, text=True, shell=True)\n            print(\"CMD:\", command)\n            print(\"STDOUT:\", result.stdout)\n            print(\"STDERR:\", result.stderr)\n            print(\"Return Code:\", result.returncode)\n            assert result.returncode == 0\n            return result\n    \n        # setup before module tests\n        # bash getAndRunInstaller.sh -m ${verMode} -f server -l false -c x64  -v ${version} -o ${baseVersion} -s ${sourcePath}  -t tar\n        verMode = request.config.getoption(\"--verMode\")\n        taosVersion = request.config.getoption(\"--taosVersion\")\n        baseVersion = request.config.getoption(\"--baseVersion\")\n        sourcePath = request.config.getoption(\"--sourcePath\")\n        cmd = \"bash getAndRunInstaller.sh -m %s -f server -l false -c x64 -v %s -o %s -s %s -t tar\" % (\n            verMode, taosVersion, baseVersion, sourcePath)\n        run_command(cmd)\n        cmd = \"cp /usr/bin/taos*  ../../debug/build/bin/\"\n>       run_command(cmd)\n\ntest_server_linux.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncommand = 'cp /usr/bin/taos*  ../../debug/build/bin/'\n\n    def run_command(command):\n        result = subprocess.run(command, capture_output=True, text=True, shell=True)\n        print(\"CMD:\", command)\n        print(\"STDOUT:\", result.stdout)\n        print(\"STDERR:\", result.stderr)\n        print(\"Return Code:\", result.returncode)\n>       assert result.returncode == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode\n\ntest_server_linux.py:18: AssertionError"}, "teardown": {"duration": 0.00018467700000002196, "outcome": "passed"}}, {"nodeid": "test_server_linux.py::TestServerLinux::test_execute_cases[system-test,python3 ./test.py -f 2-query/fill.py]", "lineno": 59, "outcome": "error", "keywords": ["test_execute_cases[system-test,python3 ./test.py -f 2-query/fill.py]", "server_linux", "pytestmark", "system-test,python3 ./test.py -f 2-query/fill.py", "TestServerLinux", "test_server_linux.py", "smokeTest", ""], "setup": {"duration": 0.0002326020000000817, "outcome": "failed", "crash": {"path": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/test_server_linux.py", "lineno": 18, "message": "AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode"}, "traceback": [{"path": "test_server_linux.py", "lineno": 31, "message": ""}, {"path": "test_server_linux.py", "lineno": 18, "message": "AssertionError"}], "longrepr": "request = <SubRequest 'setup_module' for <Function test_execute_cases[# army,python3 ./test.py -f query/query_basic.py -N 3]>>\n\n    @pytest.fixture(scope=\"module\")\n    def setup_module(request):\n        def run_command(command):\n            result = subprocess.run(command, capture_output=True, text=True, shell=True)\n            print(\"CMD:\", command)\n            print(\"STDOUT:\", result.stdout)\n            print(\"STDERR:\", result.stderr)\n            print(\"Return Code:\", result.returncode)\n            assert result.returncode == 0\n            return result\n    \n        # setup before module tests\n        # bash getAndRunInstaller.sh -m ${verMode} -f server -l false -c x64  -v ${version} -o ${baseVersion} -s ${sourcePath}  -t tar\n        verMode = request.config.getoption(\"--verMode\")\n        taosVersion = request.config.getoption(\"--taosVersion\")\n        baseVersion = request.config.getoption(\"--baseVersion\")\n        sourcePath = request.config.getoption(\"--sourcePath\")\n        cmd = \"bash getAndRunInstaller.sh -m %s -f server -l false -c x64 -v %s -o %s -s %s -t tar\" % (\n            verMode, taosVersion, baseVersion, sourcePath)\n        run_command(cmd)\n        cmd = \"cp /usr/bin/taos*  ../../debug/build/bin/\"\n>       run_command(cmd)\n\ntest_server_linux.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncommand = 'cp /usr/bin/taos*  ../../debug/build/bin/'\n\n    def run_command(command):\n        result = subprocess.run(command, capture_output=True, text=True, shell=True)\n        print(\"CMD:\", command)\n        print(\"STDOUT:\", result.stdout)\n        print(\"STDERR:\", result.stderr)\n        print(\"Return Code:\", result.returncode)\n>       assert result.returncode == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = CompletedProcess(args='cp /usr/bin/taos*  ../../debug/build/bin/', returncode=1, stdout='', stderr='cp: /usr/bin/taos*: No such file or directory\\n').returncode\n\ntest_server_linux.py:18: AssertionError"}, "teardown": {"duration": 0.000250487000000188, "outcome": "passed"}}], "warnings": [{"message": "Unknown pytest.mark.server_linux - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/Users/xuyunlong/Desktop/TDengine/packaging/smokeTest/test_server_linux.py", "lineno": 60}]}